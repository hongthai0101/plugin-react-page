{"version":3,"sources":["constants/Styled.js","constants/Table.js","apis/config.js","apis/index.js","apis/url.js","components/ListRequest.js","utils/common.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","Table","columns","data","fetchData","loading","controlledPageCount","pageCount","useTable","initialState","pageIndex","manualPagination","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","useEffect","style","background","color","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","colSpan","length","className","onClick","disabled","Math","ceil","type","defaultValue","onChange","e","target","value","Number","width","key","baseURL","process","REACT_APP_API_GATEWAY","getListRequest","filter","url","query","urls","encodeURI","JSON","stringify","axios","method","then","rs","updateRequestById","id","countRequest","RequestList","useState","requests","setRequests","setLoading","setPageCount","keySearch","setKeySearch","currentPageSize","setCurrentPageSize","currentPageIndex","setPageIndex","fetchIdRef","React","useRef","count","useCallback","fetchId","current","startRow","offset","limit","order","res","catch","err","handleClick","body","a","onSearch","where","phone","like","useMemo","Header","accessor","d","Cell","purchaseMethod","address","ward","district","province","product","brand","model","attributeOptions","item","name","price","locales","currency","Intl","NumberFormat","format","moneyItemAdapter","valuationPrice","time","createdAt","moment","status","includes","for","placeholder","onKeyDown","code","preventDefault","App","Boolean","window","location","hostname","match","appSelector","rpReactPlugin","appAnchorElement","document","querySelector","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.cb9d495b.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Styles = styled.div`\n  /* This is required to make the table full-width */\n  display: block;\n  max-width: 100%;\n\n  /* This will make the table scrollable when it gets too small */\n  .tableWrap {\n    display: block;\n    max-width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    border-bottom: 1px solid black;\n  }\n\n  table {\n    /* Make sure the inner table is always as wide as needed */\n    width: 100%;\n    border-spacing: 0;\n\n    tr {\n      border: 1px solid black;\n    }\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      /* The secret sauce */\n      /* Each cell should grow equally */\n      width: 1%;\n      /* But \"collapsed\" cells should be as small as possible */\n      &.collapse {\n        width: 0.0000000001%;\n      }\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`;\n\nexport default Styles;\n","import { useTable, usePagination } from \"react-table\";\nimport React, { useEffect } from \"react\";\n\nconst Table = ({\n  columns,\n  data,\n  fetchData,\n  loading,\n  pageCount: controlledPageCount,\n}) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    // Get the state from the instance\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0 },\n      manualPagination: true,\n      pageCount: controlledPageCount,\n    },\n    usePagination\n  );\n\n  useEffect(() => {\n    fetchData({ pageIndex, pageSize });\n  }, [fetchData, pageIndex, pageSize]);\n\n  // Render the UI for your table\n  return (\n    <div>\n      <table {...getTableProps()}>\n        <thead style={{ background: \"#167f92\", color: \"white\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" 🔽\"\n                        : \" 🔼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          <tr>\n            {loading ? (\n              // Use our custom loading state to show a loading indicator\n              <td colSpan=\"10000\">Loading...</td>\n            ) : (\n              <td colSpan=\"10000\">\n                Showing {page.length} of ~{controlledPageCount} results\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {\"<<\"}\n        </button>{\" \"}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {\"<\"}\n        </button>{\" \"}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {\">\"}\n        </button>{\" \"}\n        <button\n          onClick={() => gotoPage(Math.ceil(pageOptions.length / pageSize) - 1)}\n          disabled={!canNextPage}\n        >\n          {\">>\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {Math.ceil(pageOptions.length / pageSize)}\n          </strong>{\" \"}\n        </span>\n        <span>\n          | Go to page:{\" \"}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            }}\n            style={{ width: \"100px\" }}\n          />\n        </span>{\" \"}\n        <select\n          value={pageSize}\n          onChange={(e) => {\n            setPageSize(Number(e.target.value));\n          }}\n        >\n          {[10, 20, 30, 40, 50].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n","export const baseURL =\n  process.env.REACT_APP_API_GATEWAY ||\n  \"https://gateway.vietmoney.vn/liquidation-service/v1\";\n","import axios from \"axios\";\nimport * as urls from \"./url\";\n\nexport function getListRequest(filter) {\n  const query = `filter=${encodeURI(JSON.stringify(filter))}`;\n  let url = urls.getConsultingUrl(query);\n  return axios({\n    method: \"get\",\n    url,\n  }).then((rs) => rs.data);\n}\n\nexport function updateRequestById(id, data) {\n  // const query = `filter=${encodeURI(JSON.stringify(filter))}`;\n  let url = urls.updateConsultingUrl(id);\n  return axios({\n    method: \"patch\",\n    data,\n    url,\n  }).then((rs) => rs.data);\n}\n\nexport function countRequest(filter) {\n  const query = `filter=${encodeURI(JSON.stringify(filter))}`;\n  let url = urls.countConsultingUrl(query);\n  return axios({\n    method: \"get\",\n    url,\n  }).then((rs) => rs.data);\n}\n","import { baseURL } from \"./config\";\n\nexport const getConsultingUrl = (query) =>\n  `${baseURL}/consulting-infos?${query}`;\nexport const countConsultingUrl = (query) =>\n  `${baseURL}/consulting-infos/count?${query}`;\nexport const updateConsultingUrl = (id) => `${baseURL}/consulting-infos/${id}`;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport Styles from \"../constants/Styled\";\nimport Table from \"../constants/Table\";\nimport { getListRequest, updateRequestById, countRequest } from \"../apis\";\nimport { Input, FormGroup, Form, Label, Button, InputGroup } from \"reactstrap\";\nimport {\n  moneyItemAdapter,\n  dateTimeAdapter,\n  statusAdapter,\n} from \"../utils/common\";\n\nconst RequestList = () => {\n  const [requests, setRequests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  const [keySearch, setKeySearch] = useState(\"\");\n  const [currentPageSize, setCurrentPageSize] = useState(10);\n  const [currentPageIndex, setPageIndex] = useState(0);\n\n  const fetchIdRef = React.useRef(0);\n\n  useEffect(() => {\n    countRequest().then((rs) => setPageCount(rs.count));\n  }, []);\n\n  const fetchData = useCallback(({ pageSize, pageIndex }) => {\n    const fetchId = ++fetchIdRef.current;\n\n    setLoading(true);\n\n    if (fetchId === fetchIdRef.current) {\n      const startRow = pageSize * pageIndex;\n\n      // const endRow = startRow + pageSize;\n\n      setCurrentPageSize(pageSize);\n      setPageIndex(pageIndex);\n\n      const filter = {\n        offset: startRow,\n        limit: pageSize,\n        order: [\"createdAt DESC\"],\n      };\n      getListRequest(filter)\n        .then((res) => setRequests(res))\n        .catch((err) => {\n          throw err;\n        });\n\n      // Your server could send back total page count.\n      // For now we'll just fake it, too\n\n      setLoading(false);\n    }\n  }, []);\n  // const data = React.useMemo(() => requests, []);\n  const handleClick = useCallback(\n    async (id, body) => {\n      try {\n        await updateRequestById(id, body);\n        fetchData({ pageSize: currentPageSize, pageIndex: currentPageIndex });\n      } catch (error) {\n        throw error;\n      }\n    },\n    [currentPageIndex, currentPageSize]\n  );\n\n  const onSearch = useCallback(async (keySearch) => {\n    try {\n      const filter = {\n        where: {\n          phone: {\n            like: `.*${keySearch}.*`,\n          },\n        },\n      };\n      const data = await getListRequest(filter);\n      setRequests(data);\n      const count = await countRequest(filter);\n      setPageCount(count.count);\n    } catch (error) {\n      throw error;\n    }\n  }, []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Thông tin khách hàng\",\n        columns: [\n          {\n            Header: \"Họ tên\",\n            accessor: \"name\",\n          },\n          {\n            Header: \"SDT\",\n            accessor: \"phone\",\n          },\n          {\n            Header: \"Địa chỉ\",\n            accessor: (d) => d,\n            Cell: ({ value }) => {\n              return (\n                <div>\n                  {value.purchaseMethod === \"TCH\"\n                    ? \"129 Hoàng Văn Thụ, Phường 8, Phú Nhuận, TPHCM\"\n                    : ` ${value.address}, ${value.ward}, ${value.district}, ${value.province}`}\n                </div>\n              );\n            },\n          },\n        ],\n      },\n      {\n        Header: \"Thông tin sản phẩm\",\n        columns: [\n          {\n            Header: \"Sản phẩm\",\n            accessor: (d) => d.product,\n            Cell: ({ value }) => {\n              return (\n                <div>\n                  {value.brand} - {value.model}\n                  {value?.attributeOptions.map((item) => (\n                    <div>\n                      <span className=\"fw-bold\">{item.name}</span>: {item.value}\n                    </div>\n                  ))}\n                </div>\n              );\n            },\n          },\n          {\n            Header: \"Giá định giá\",\n            accessor: (d) => moneyItemAdapter(d.valuationPrice),\n          },\n          {\n            Header: \"Ngày tạo\",\n            accessor: (d) => dateTimeAdapter(d.createdAt),\n          },\n        ],\n      },\n      {\n        Header: \"Trạng thái\",\n        accessor: (d) => d,\n        Cell: ({ value }) => statusAdapter(value.status),\n      },\n      {\n        Header: \"Hành động\",\n        accessor: (d) => d,\n        Cell: ({ value }) => {\n          return (\n            <div>\n              <Button\n                color=\"success\"\n                className=\"mx-2\"\n                onClick={() => handleClick(value.id, { status: \"completed\" })}\n                disabled={[\"completed\", \"rejected\"].includes(value.status)}\n              >\n                Xác nhận\n              </Button>\n              <Button\n                color=\"danger\"\n                onClick={() => handleClick(value.id, { status: \"rejected\" })}\n                disabled={[\"completed\", \"rejected\"].includes(value.status)}\n              >\n                Từ chối\n              </Button>\n            </div>\n          );\n        },\n      },\n    ],\n    [currentPageIndex, currentPageSize]\n  );\n\n  return (\n    <div>\n      <Form className=\"p-3\">\n        <FormGroup>\n          <Label for=\"exampleEmail\">Tìm kiếm</Label>\n          <InputGroup>\n            <Input\n              placeholder=\"Nhập số điện thoại\"\n              onChange={(e) => setKeySearch(e.target.value)}\n              onKeyDown={(e) => {\n                if (e.code === \"Enter\") {\n                  e.preventDefault();\n                  onSearch(keySearch);\n                }\n              }}\n            />\n            <Button color=\"primary\" onClick={() => onSearch(keySearch)}>\n              Tìm kiếm\n            </Button>\n          </InputGroup>\n        </FormGroup>\n      </Form>\n      <Styles>\n        {\n          <Table\n            columns={columns}\n            data={requests}\n            loading={loading}\n            fetchData={fetchData}\n            pageCount={pageCount}\n          />\n        }\n      </Styles>\n    </div>\n  );\n};\n\nexport default RequestList;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Button, Badge } from \"reactstrap\";\n\n// export const moneyItemAdapter = (number = 0) => {\n//   return number ? `${number.toLocaleString()} đ` : \"0đ\";\n// };\n\nexport const moneyItemAdapter = (\n  price,\n  locales = \"vn-VN\",\n  currency = \"VND\"\n) => {\n  if (!price) {\n    return \"0 đ\";\n  }\n  return (\n    new Intl.NumberFormat(locales, {\n      currency: currency,\n    }).format(price) + \" đ\"\n  );\n};\n\nexport const dateTimeAdapter = (time) => {\n  return moment(time).format(\"HH:mm:ss DD/MM/YYYY\");\n};\n\nexport const statusAdapter = (status) => {\n  if (status === \"pending\") {\n    return <Badge color=\"primary\">Chưa xử lý</Badge>;\n  } else if (status === \"completed\")\n    return <Badge color=\"success\">Đã xử lý</Badge>;\n  else if (status === \"rejected\") return <Badge color=\"danger\">Từ chối</Badge>;\n  else\n    return (\n      <Badge className=\"badge badge-secondary badge-pill\">Chờ duyệt</Badge>\n    );\n};\n","import React from \"react\";\n// import \"./App.css\";\nimport RequestList from \"./components/ListRequest\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RequestList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst reactAppData = window.rpReactPlugin || {};\nconst { appSelector } = reactAppData;\nconst appAnchorElement = document.querySelector(appSelector);\n\nif (appAnchorElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appAnchorElement\n  );\n}\n// else {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <App />\n//     </React.StrictMode>,\n//     document.getElementById(\"root\")\n//   );\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}